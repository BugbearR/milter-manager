# -*- rd -*-
= リリース手順

== テストの実行

以降の作業をする前にテストを実行する。rdtool, ruby-gettext, rr が必要な
ので無ければ入れておく。

  % gem install rdtool gettext rr
  % ./autogen.sh --no-update
  % ./configure --prefix=/tmp/local \
    --enable-ruby-milter --enable-gtk-doc --enable-coverage
  % make
  % make check
  % make coverage

make check でテストが失敗したり make coverage で極端にカバレッジが低い
場合は何かがおかしいのでチェックする。

== 変更点の記述

変更点を NEWS, NEWS.ja に記述する。

git tag で前回リリースのタグを確認してから、コマンドを実行してログを読
む。

  % git log --reverse -p <前回リリースのタグ>..

例(1.8.1リリースの場合):
  % git log --reverse -p 1.8.0..

diff が長い場合は "Author:" で検索すると次のエントリにジャンプできる。

NEWS にログを抜粋してざっくりカテゴリ分けしてから NEWS.ja に日本語で書
いたあと、NEWS の英語をチェックする。

カテゴリは以下のようにディレクトリ名やコマンド名に対応している。

: 全体
  全体的な修正。
: milter manager
  milter manager に関する修正。
: milter-core
  milter/core 以下の修正。
: milter-client
  milter/client 以下の修正。
: milter-server
  milter/server 以下の修正。
: Ruby milter
  binding/ruby/{ext,lib} 以下の修正。
: コマンド名
  コマンド名のコマンドの修正。例えば、milter-test-server など。
: ドキュメント
  ドキュメントの修正。
: その他
  上のカテゴリにあてはまらないその他の修正。

前のバージョンのエントリを参考に

  * 改良
  * 修正
  * 報告者や貢献者の名前

を書く。

なお、内部的な修正は基本的には NEWS には書かないが、パッチをもらったり、
報告をもらったりしたものは NEWS に書くようにする。

== ドキュメントの確認と更新

新バージョンに対応したドキュメントになっているか確認して更新する。

NEWS に書いた改良点や修正点を見ながらドキュメントをチェックして、更新で
きていない場合は、更新する。

== バージョン情報の更新

各種パッケージやドキュメントに埋め込むバージョン情報を更新する。
トップディレクトリでコマンドを実行する。
OLD_RELEASE_DATE は debian/changelog をチェックすればわかる。

  % make dist
  % make update-latest-release \
    OLD_RELEASE=1.8.0 \
    OLD_RELEASE_DATE=yyyy-mm-dd \
    NEW_RELEASE_DATE=yyyy-mm-dd

バージョン情報を更新したら、差分を確認してからコミットする。

== リリース用パッケージ作成のための事前準備

初回のみ必要な作業である。

=== sourceforge.net への SSH アクセス

公開鍵認証でアクセスするので、設定が必要である。

$HOME/ssh/config:
  ...
  Host: *.sourceforge.net
    User: <username>
    IdentityFile: </path/to/secret_key>
  ...

このようにメッセージが表示できていれば、問題ない。
  % ssh frs.sourceforge.net
  Welcome!
  
  This is a restricted Shell Account.
  You can only copy files to/from here.
  
  Connection to frs.sourceforge.net closed.


アクセスできない場合はプロジェクト管理者に連絡してください。

=== 必須パッケージのインストール

  % sudo apt-get install -y debootstrap gnupg
  % sudo apt-get install -y rinse createrepo rpm

=== GPG 鍵ペアの作成

GPG 鍵ペアを持っていない場合は、作成する。以下のコマンドを実行すると、
対話的に鍵ペアを作成できる。

  % gpg --gen-key

作成したらキーサーバに公開鍵を送信する。

  % gpg --keyserver pgp.mit.edu --send-keys <key-id>

=== milter manager リリース用鍵

milter-manager のリリース用鍵の情報を暗号化しておく。UID の公開鍵があれ
ば、UID 用に暗号化できる。

  % gpg -e -a -r <UID> secret.txt

復号する。

  % gpg -d secret.txt.asc > secret.txt

インポートする。(secret.txt にはパスフレーズと秘密鍵が含まれている。)

  % gpg --keyserver pgp.mit.edu --recv-keys 435C1F50
  % gpg --allow-secret-key-import --import secret.txt

== リリース用パッケージ作成

リリース用パッケージの作成には HDD の空き容量が 20GB 以上必要である。
また、パッケージ作成中に sudo コマンドを使用するので事前に

  % sudo ls

などで認証情報をキャッシュするようにするか NOPASSWD を設定しておく。

なお、パッケージの作成は Debian GNU/Linux か Ubuntu でしかできない。

=== Debian 系

apt ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行するが、途中で失敗することもあるので、順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makfile.am に書いてあるので head などで確認する。

  % make download
  % make build PARALLEL=yes
  % make update
  % make sign
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走る。

初めて実行するときは、chroot 環境を作るときにロケールなどを聞かれるので
PARALLEL=yes をつけてはいけない。

=== RedHat 系

yum ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行するが、途中で失敗することもあるので順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makfile.am に書いてあるので head などで確認する。

  % make download
  % make remove-existing-packages
  % make build PARALLEL=yes
  % make sign
  % make update
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走る。

== ソースアーカイブのアップロード

ソースアーカイブの作成はもうできているのでアップロードする。

  % make release

== サイトの更新

ドキュメントをアップロードする。

  % make upload-doc
  % make upload-coverage

== リモートリポジトリにタグを打つ

トップディレクトリでコマンドを実行する。

  % make tag VERSION=<version>
  % git push --tags

例:
  % make tag VERSION=1.8.1
  % git push --tags

== リリースメールを書いて ML に投げる

NEWS.ja, NEWS を参考にして日本語、英語のメールを書いてそれぞれ

  * milter-manager-users-ja@lists.sourceforge.net
  * milter-manager-users-en@lists.sourceforge.net

に投げる。

=== メールのテンプレート (ja)

URL やバージョンを変更して使う。

  [ANN] milter manager <new-version>

  ○○です。
  
  milter manager <new-version> をリリースしました。
    http://milter-manager.sourceforge.net/index.html.ja
    http://http://milter-manager.sourceforge.net/blog/ja/

  = ハイライト

  このバージョンをインストールする人が「インストールしよう」と思え
  るような判断材料を書く。

    * 目玉機能
    * セキュリティ
    * 致命的なバグを修正した
  
  = インストール方法
  
  新しくmilter managerをインストールする場合はこちらのドキュメ
  ントを参考にしてください。
    http://milter-manager.sourceforge.net/reference/ja/install-to.html
  
  すでにインストールしているmilter managerをアップグレードする
  場合はこちらのドキュメントを参考にしてください。
    http://milter-manager.sourceforge.net/reference/ja/upgrade.html
  
  = 変更点

  <old-version>からの変更点は以下の通りです。
    http://milter-manager.sourceforge.net/reference/ja/news.html#news.release-1-8-0

  [ここに NEWS.ja の内容をペーストする]

=== メールのテンプレート (en)

URL やバージョンを変更して使う。

  [ANN] milter manager <new-version>

  Hi,
  
  milter manager <new-version> has been released.
    http://milter-manager.sourceforge.net/
  
  = Highlight

  このバージョンをインストールする人が「インストールしよう」と思え
  るような判断材料を書く。

    * 目玉機能
    * セキュリティ
    * 致命的なバグを修正した

  = Install
  
  Here are documents for installation:
    http://milter-manager.sourceforge.net/reference/install-to.html
  
  Here are documents for upgrading:
    http://milter-manager.sourceforge.net/reference/upgrade.html
  
  = Changes
  
  Here are changes since <old-version>:
    http://milter-manager.sourceforge.net/reference/news.html#news.release-1-8-0
  
  [ここに NEWS の内容をペーストする]

== ブログでもリリースをアナウンスする

((<URL:http://milter-manager.sourceforge.net/blog/ja/>))

((<URL:http://www.tdiary.org/>)) から最新版の tDiary をダウンロードして
セットアップする。

sf.net の milter manager プロジェクトからブログ用のリポジトリを clone
して tDiary をローカルで動くようにセットアップする。

CGI で動かすよりも Rack で動かした方が便利なのでそうする。

  % mkdir -p ~/work/ruby/tdiary
  % cd ~/work/ruby/tdiary
  % tar xf tdiary-full-3.1.1.tar.gz
  % ln -s tdiary-full-3.1.1 tdiary
  % cd tdiary
  % bundle install --path vendor/bundle
  % cp tdiary.conf{.sample,}

misc/style/rd/README.rd を参照して RD スタイルを使うように変更する。
@data_path をブログ用リポジトリを git clone したパスに設定する。

  % bundle exec rackup -s thin

ウェブブラウザで ((<URL:http://localhost:9292/>)) にアクセスしてトップ
ページが表示されればセットアップに成功している。

デフォルトのユーザ名(user)とパスワード(pass)でログインすれば更新できる。
ブラウザから tDiary でエントリを投稿すると、ブログ用エントリのファイル
(*.td2)が作成・更新されるのでブログ用リポジトリに git push する。

  % ./update.rb --upload

== Freecode でアナウンス

((<URL:http://freecode.com/projects/milter-manager>)) でアナウンスする。

内容は英語版リリースメールの始めに書いているのと同じでよい。

アカウントが無い場合は作成してプロジェクト管理者に連絡する。

