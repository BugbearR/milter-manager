# -*- rd -*-
= リリース手順

== テストの実行

以降の作業をする前にテストを実行する。rdtool, ruby-gettext, rr が必要な
ので無ければ入れておく。sf_user_name には sourceforge.net のアカウント
名を指定する。

rbenv を使用している場合は、以下のように ruby コマンドと rd2 コマンドの
パスを指定する。rbenv を使用していない場合は各コマンドのパスを自動検出
するようになっている。

TODO: 手順を整理する。
NOTE: apt で入れるパッケージと gem で入れるパッケージが被っている。。。

  % sudo apt-get install \
    ruby-gnome2-dev \
    ruby-glib2 \
    cutter-glib-support \
    cutter-testing-framework-bin \
    lcov \
    gtk-doc-tools \
    gnome-doc-utils \
    libglib2.0-dev \
    ruby-gnome2-dev \
    build-essential \
    rdtool \
    ruby-fast-gettext \
    inkscape
  % gem install rdtool rttool gettext fast_gettext rr mechanize
  % ACLOCAL_OPTIONS="-I $HOME/opt/cutter/share/aclocal" ./autogen.sh --no-update
  % ./configure --prefix=/tmp/local \
    --enable-ruby-milter --enable-gtk-doc --enable-coverage \
    --with-sf-user=sf_user_name \
    --with-cutter-source-path=/path/to/cutter/source \
    --with-ruby=$(rbenv which ruby) \
    --with-rd2=$(rbenv which rd2) \
    PKG_CONFIG_PATH=$HOME/opt/cutter/lib/pkgconfig
  % make
  % make check
  % make coverage

make check でテストが失敗したり make coverage で極端にカバレッジが低い
場合は何かがおかしいのでチェックする。

== 変更点の記述

変更点を NEWS, NEWS.ja に記述する。

git tag で前回リリースのタグを確認してから、コマンドを実行してログを読
む。

  % git log --reverse -p <前回リリースのタグ>..

例:
  % git log --reverse -p $(git tag | tail -n 1)..

diff が長い場合は "Author:" で検索すると次のエントリにジャンプできる。

NEWS にログを抜粋してざっくりカテゴリ分けしてから NEWS.ja に日本語で書
いたあと、NEWS の英語をチェックする。

カテゴリは以下のようにディレクトリ名やコマンド名に対応している。

: 全体
  全体的な修正。
: milter manager
  milter manager に関する修正。
: milter-core
  milter/core 以下の修正。
: milter-client
  milter/client 以下の修正。
: milter-server
  milter/server 以下の修正。
: Ruby milter
  binding/ruby/{ext,lib} 以下の修正。
: コマンド名
  コマンド名のコマンドの修正。例えば、milter-test-server など。
: ドキュメント
  ドキュメントの修正。
: その他
  上のカテゴリにあてはまらないその他の修正。

前のバージョンのエントリを参考に

  * 改良
  * 修正
  * 報告者や貢献者の名前

を書く。

なお、内部的な修正は基本的には NEWS には書かないが、パッチをもらったり、
報告をもらったりしたものは NEWS に書くようにする。

== ドキュメントの確認と更新

新バージョンに対応したドキュメントになっているか確認して更新する。

NEWS に書いた改良点や修正点を見ながらドキュメントをチェックして、更新で
きていない場合は、更新する。

  % make update-files
  % make update-po
  % make -C html
  % make -C doc/reference

== バージョン情報の更新

各種パッケージやドキュメントに埋め込むバージョン情報を更新する。
トップディレクトリでコマンドを実行する。
OLD_RELEASE_DATE は debian/changelog をチェックすればわかる。

  % make update-latest-release \
    OLD_RELEASE=$(git tag | tail -n 1) \
    OLD_RELEASE_DATE=$(grep -E "^ --" package/debian/changelog | head -n 1 | ruby -rdate -e "puts Date.parse(ARGF.read).strftime('%Y-%m-%d')") \
    NEW_RELEASE_DATE=yyyy-mm-dd
  % make dist

バージョン情報を更新したら、差分を確認してからコミットする。

== リリース用パッケージ作成のための事前準備

初回のみ必要な作業である。

=== sourceforge.net への SSH アクセス

公開鍵認証でアクセスするので、設定が必要である。User には
sourceforge.net のアカウント名とプロジェクト名をコンマでつないだ文字列
を指定する必要がある。(ex. hoge,milter-manager)

$HOME/ssh/config:
  ...
  Host: frs.sourceforge.net
    User: <username>,<project-name>
    IdentityFile: </path/to/secret_key>
  Host: *.sourceforge.net
    User: <username>
    IdentityFile: </path/to/secret_key>
  ...

このようにメッセージが表示できていれば、問題ない。
  % ssh frs.sourceforge.net
  Welcome!
  
  This is a restricted Shell Account.
  You can only copy files to/from here.
  
  Connection to frs.sourceforge.net closed.


アクセスできない場合はプロジェクト管理者に連絡する。

=== 必須パッケージのインストール

  % sudo apt-get install -y debootstrap gnupg
  % sudo apt-get install -y rinse createrepo rpm

=== GPG 鍵ペアの作成

GPG 鍵ペアを持っていない場合は、作成する。以下のコマンドを実行すると、
対話的に鍵ペアを作成できる。

  % gpg --gen-key

作成したらキーサーバに公開鍵を送信する。

  % gpg --keyserver pgp.mit.edu --send-keys <key-id>

=== milter manager リリース用鍵

milter-manager のリリース用鍵の情報を暗号化しておく。UID の公開鍵があれ
ば、UID 用に暗号化できる。

  % gpg -e -a -r <UID> secret.txt

復号する。

  % gpg -d secret.txt.asc > secret.txt

インポートする。(secret.txt にはパスフレーズと秘密鍵が含まれている。)

  % gpg --keyserver pgp.mit.edu --recv-keys 1BD22CD1
  % gpg --allow-secret-key-import --import secret.txt

== リリース用パッケージ作成

リリース用パッケージの作成には HDD の空き容量が 20GB 以上必要である。
また、パッケージ作成中に sudo コマンドを使用するので事前に

  % sudo ls

などで認証情報をキャッシュするようにするか NOPASSWD を設定しておく。

なお、パッケージの作成は Debian GNU/Linux か Ubuntu でしかできない。

=== Debian 系

apt ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行するが、途中で失敗することもあるので、順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makefile.am に書いてあるので head などで確認する。

  % make download
  % make build PARALLEL=yes
  % make update
  % make sign
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走る。

初めて実行するときは、chroot 環境を作るときにロケールなどを聞かれるので
PARALLEL=yes をつけてはいけない。

make sign したら sourceforge.net をエミュレートするウェブサー
バをローカルに構築してパッケージの新規インストールと更新をテストする。

((<Debianへインストール|install-to-debian.rd.ja>)),
((<Ubuntuへインストール|install-to-ubuntu.rd.ja>)),
((<Debianで更新|upgrade-on-debian.rd.ja>)),
((<Ubuntuで更新|upgrade-on-ubuntu.rd.ja>))
に書いてある手順でパッケージのインストールと更新ができることを確認する。

make upload したらウェブブラウザで
((<URL:https://sourceforge.net/projects/milter-manager/files/debian/>)),
((<URL:https://sourceforge.net/projects/milter-manager/files/ubuntu/>))
にアクセスしてパッケージがアップロードできていることを確認する。

=== RedHat 系

yum ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行するが、途中で失敗することもあるので順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makefile.am に書いてあるので head などで確認する。

  % make download
  % make build PARALLEL=yes
  % make sign
  % make update
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走る。

make sign したら sourceforge.net をエミュレートするウェブサー
バをローカルに構築してパッケージの新規インストールと更新をテストする。

((<CentOSへインストール|install-to-centos.rd.ja>)),
((<CentOSで更新|upgrade-on-centos.rd.ja>)),
に書いてある手順でパッケージのインストールと更新ができることを確認する。

make upload したらウェブブラウザで
((<URL:https://sourceforge.net/projects/milter-manager/files/centos/>))
にアクセスしてパッケージがアップロードできていることを確認する。

== ソースアーカイブのアップロード

ソースアーカイブの作成はもうできているのでアップロードする。
トップディレクトリでコマンドを実行する。

  % make release

ウェブブラウザで
((<URL:https://sourceforge.net/projects/milter-manager/files/milter%20manager/>))
にアクセスして新しいバージョンのファイルが追加されていることを確認する。

== サイトの更新

ドキュメントをアップロードする。トップディレクトリでコマンドを実行する。

  % make upload-doc
  % make upload-coverage

ウェブブラウザで ((<URL:http://milter-manager.sourceforge.net/>)) にア
クセスして新しいドキュメントがアップロードできていることを確認する。

== リモートリポジトリにタグを打つ

トップディレクトリでコマンドを実行する。

  % make tag VERSION=<version>
  % git push --tags

例:
  % make tag VERSION=1.8.1
  % git push --tags

ウェブブラウザで
((<URL:https://github.com/milter-manager/milter-manager/tags>)) にアク
セスして新しいバージョンのタグができていることを確認する。

== GitHub にリリースを作成する

GitHub にもリリースを作成する。

タグを作成してからでないとエラーになるので、注意すること。

  % make release-github VERSION=<version> ACCESS_TOKEN_FILE=<path-to-access-token-file>

例:
  % make release-github VERSION=2.0.4 ACCESS_TOKEN_FILE=$HOME/github-access-token.txt

== リリースメールを書いて ML に投げる

NEWS.ja, NEWS を参考にして日本語、英語のメールを書いてそれぞれ

  * milter-manager-users-ja@lists.sourceforge.net
  * milter-manager-users-en@lists.sourceforge.net

に投げる。

=== メールのテンプレート (ja)

URL やバージョンを変更して使う。

  [ANN] milter manager <new-version>

  ○○です。
  
  milter manager <new-version> をリリースしました。
    http://milter-manager.sourceforge.net/index.html.ja
    http://milter-manager.sourceforge.net/blog/ja/

  = ハイライト

  このバージョンをインストールする人が「インストールしよう」と思え
  るような判断材料を書く。

    * 目玉機能
    * セキュリティ
    * 致命的なバグを修正した
  
  = インストール方法
  
  新しくmilter managerをインストールする場合はこちらのドキュメ
  ントを参考にしてください。
    http://milter-manager.sourceforge.net/reference/ja/install-to.html
  
  すでにインストールしているmilter managerをアップグレードする
  場合はこちらのドキュメントを参考にしてください。
    http://milter-manager.sourceforge.net/reference/ja/upgrade.html
  
  = 変更点

  <old-version>からの変更点は以下の通りです。
    http://milter-manager.sourceforge.net/reference/ja/news.html#news.release-1-8-0

  [ここに NEWS.ja の内容をペーストする]

=== メールのテンプレート (en)

URL やバージョンを変更して使う。

  [ANN] milter manager <new-version>

  Hi,
  
  milter manager <new-version> has been released.
    http://milter-manager.sourceforge.net/
  
  = Highlight

  このバージョンをインストールする人が「インストールしよう」と思え
  るような判断材料を書く。

    * 目玉機能
    * セキュリティ
    * 致命的なバグを修正した

  = Install
  
  Here are documents for installation:
    http://milter-manager.sourceforge.net/reference/install-to.html
  
  Here are documents for upgrading:
    http://milter-manager.sourceforge.net/reference/upgrade.html
  
  = Changes
  
  Here are changes since <old-version>:
    http://milter-manager.sourceforge.net/reference/news.html#news.release-1-8-0
  
  [ここに NEWS の内容をペーストする]

== ブログでもリリースをアナウンスする

((<URL:http://milter-manager.sourceforge.net/blog/ja/>))

((<URL:http://www.tdiary.org/>)) から最新版の tDiary をダウンロードして
セットアップする。

CGI で動かすよりも Rack で動かした方が便利なのでそうする。tdiary.conf
は milter-manager のリポジトリにあるものを使う。

  % mkdir -p ~/work/ruby/tdiary
  % cd ~/work/ruby/tdiary
  % tar xf tdiary-full-3.1.1.tar.gz
  % ln -s tdiary-full-3.1.1 tdiary
  % cd tdiary
  % echo "gem \"tdiary-style-rd\"" >> Gemfile.local
  % bundle install --path vendor/bundle
  % ln -s ~/wc/milter-manager/html/blog/tdiary.conf tdiary.conf
  % ln -s ~/wc/milter-manager/html/blog/clear-code clear-code/public
  % bundle exec ruby bin/tdiary htpasswd

  % bundle exec rackup

ウェブブラウザで ((<URL:http://localhost:9292/>)) にアクセスしてトップ
ページが表示されればセットアップに成功している。

デフォルトのユーザ名(user)とパスワード(pass)でログインすれば更新できる。
ブラウザから tDiary でエントリを投稿すると、ブログ用エントリのファイル
(*.td2)が作成・更新されるのでブログ用リポジトリに git push する。

  % ./update.rb --sf-user=sf_user_name

== Freecode でアナウンス

((<URL:http://freecode.com/projects/milter-manager>)) でアナウンスする。

内容は英語版リリースメールの始めに書いているのと同じでよい。

アカウントが無い場合は作成してプロジェクト管理者に連絡する。

== メジャーバージョンリリース時の追加作業

メジャーバージョンリリースというプロジェクトとしての大きなイベントを利
用して、既存のmilter managerユーザーだけではなく、「名前を聞いたことが
あるだけの人」や「そもそも知らなかったメール関係者」にも周知することを
目的として以下の作業を実施する。

=== 各種MLにアナウンス

各種MLにアナウンスするが、全く同じ文面にせず、MLごとに少しアレンジする。

また、ハイライトには前回メジャーリリースからの主な変更点や安定性が向上
したなどのアピールポイントを書く。多少、大げさに書いても問題はないので
しっかりアピールする。

  * 参考: 2.0.0リリースのときのリリースアナウンスのメール
    * http://sourceforge.net/mailarchive/message.php?msg_id=31226867
    * http://www.postfix-jp.info/ML/arc-2.5/msg00236.html
    * http://www.apache.jp/pipermail/spamassassin-jp/2013-July/000744.html
    * http://sourceforge.net/mailarchive/message.php?msg_id=31226848
    * http://thread.gmane.org/gmane.mail.postfix.user/238317
  * 日本語ML
    * milter-manager-users-ja
    * ((<Postfixの日本語のメーリングリスト|URL:http://lists.sourceforge.jp/mailman/listinfo/postfix-jp-list>>))
    * ((<SpamAssassinの日本語のメーリングリスト|URL:http://www.apache.jp/mailman/listinfo/spamassassin-jp>))
  * 英語ML
    * milter-manager-users-en
    * ((<"Postfixのメーリングリスト postfix-users@postfix.org"|URL:http://www.postfix.org/lists.html>))

=== ブログに記事を書く

milter manager のブログだけでなく、ククログにも記事を書く。ククログに記
事を書く場合は、その前にククログに milter manager の記事を書いた時期を
考慮して milter manager の説明を最初に入れるかどうかを検討する。期間が
一年以上、空いているようであれば milter manager の説明を入れるとよい。

参考: ((<"milter manager 2.0.0 リリース - ククログ(2013-07-31)"|URL:http://www.clear-code.com/blog/2013/7/31.html>))
