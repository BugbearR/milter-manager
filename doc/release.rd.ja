# -*- rd -*-
= リリース手順

== テストの実行

以降の作業をする前にテストを実行する。ドキュメントの生成に rdtool と
ruby-gettext が必要なので無ければ入れておく。

  % gem install rdtool gettext
  % ./autogen.sh --no-update
  % ./configure --prefix=/tmp/local \
    --enable-ruby-milter --enable-gtk-doc
  % make
  % make check

== 変更点の記述

変更点を NEWS, NEWS.ja に記述する。

git tag で前回リリースのタグを確認してから、コマンドを実行してログを読
む。

  % git log --reverse -p <前回リリースのタグ>..

例(1.8.1リリースの場合):
  % git log --reverse -p 1.8.0..

diff が長い場合は "Author:" で検索すると次のエントリにジャンプできる。

NEWS にログを抜粋してざっくりカテゴリ分けしてから NEWS.ja に日本語で書
いたあと、NEWS の英語をチェックする。

カテゴリは以下のようにディレクトリ名やコマンド名に対応している。

: 全体
  全体的な修正。
: milter manager
  milter manager に関する修正。
: milter-core
  milter/core 以下の修正。
: milter-client
  milter/client 以下の修正。
: milter-server
  milter/server 以下の修正。
: Ruby milter
  binding/ruby/{ext,lib} 以下の修正。
: コマンド名
  コマンド名のコマンドの修正。例えば、milter-test-server など。
: ドキュメント
  ドキュメントの修正。
: その他
  上のカテゴリにあてはまらないその他の修正。

前のバージョンのエントリを参考に

  * 改良
  * 修正
  * 報告者や貢献者の名前

を書く。

なお、内部的な修正は基本的には NEWS には書かないが、パッチをもらったり、
報告をもらったりしたものは NEWS に書くようにする。

== ドキュメントの確認と更新

新バージョンに対応したドキュメントになっているか確認して更新する。

NEWS に書いた改良点や修正点を見ながらドキュメントをチェックして、更新で
きていない場合は、更新する。

== バージョン情報の更新

各種パッケージやドキュメントに埋め込むバージョン情報を更新する。
トップディレクトリでコマンドを実行する。

  % make dist
  % make update-latest-release \
    OLD_RELEASE=1.8.0 \
    OLD_RELEASE_DATE=yyyy-mm-dd \
    NEW_RELEASE_DATE=yyyy-mm-dd

バージョン情報を更新したら、差分を確認してからコミットする。

== リリース用パッケージ作成のための事前準備

初回のみ必要な作業である。

=== sourceforge.net への SSH アクセス

公開鍵認証でアクセスするので、設定が必要である。

$HOME/ssh/config:
  ...
  Host: *.sourceforge.net
    User: <username>
    IdentityFile: </path/to/secret_key>
  ...

このようにメッセージが表示できていれば、問題ない。
  % ssh frs.sourceforge.net
  Welcome!

  This is a restricted Shell Account.
  You can only copy files to/from here.

Connection to frs.sourceforge.net closed.


アクセスできない場合はアカウントの作成などが必要である。

=== 必須パッケージのインストール

  % sudo apt-get install -y debootstrap gnupg
  % sudo apt-get install -y rinse createrepo rpm

=== GPG 鍵ペアの作成

...

=== milter manager リリース用鍵の暗号化

...

== リリース用パッケージ作成

リリース用パッケージの作成には HDD の空き容量が 20GB 以上必要である。
また、パッケージ作成中に sudo コマンドを使用するので事前に

  % sudo ls

などで認証情報をキャッシュするようにするか NOPASSWD を設定しておく。

なお、パッケージの作成は Debian GNU/Linux か Ubuntu でしかできない。

=== Debian 系

apt ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行しますが、途中で失敗することもあるので、順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makfile.am に書いてあるので head などで確認する。

  % make download
  % make build PARALLEL=yes
  % make update
  % make sign
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走ります。

=== RedHat 系

yum ディレクトリに移動してからコマンドを実行すると、一連のリリース作業
を実行しますが、途中で失敗することもあるので順番に作業した方がよい。

  % make download
  % make release

順番に作業する場合は以下のようにする。
実行するコマンドは Makfile.am に書いてあるので head などで確認する。

  % make download
  % make remove-existing-packages
  % make build PARALLEL=yes
  % make sign
  % make update
  % make upload

download を事前に実行しておかないと、アップロード済みの古いパッケージを
全て削除してしまうので忘れずに実行する。
make build に PARALLEL=yes を付けるとビルドが並列に走ります。

== ソースアーカイブの作成

ソースアーカイブの作成はもうできているのでアップロードする。

== サイトの更新

ドキュメントをアップロードする。

== リモートリポジトリにタグを打つ

トップディレクトリでコマンドを実行する。

  % make tag VERSION=<version>
  % git push --tags

例:
  % make tag VERSION=1.8.1
  % git push --tags

== リリースメールを書いて ML に投げる

NEWS.ja, NEWS を参考にして日本語、英語のメールを書いてそれぞれ

  * milter-manager-users-ja
  * milter-manager-users-en

に投げる。

== ブログでもリリースをアナウンスする

((<URL:http://milter-manager.sourceforge.net/blog/ja/>)) にもリリースメー
ルと同じ内容を書く。

== Freecode でアナウンス

((<URL:http://freecode.com/projects/milter-manager>)) でアナウンスする。

内容は英語版リリースメールの始めに書いているのと同じでよい。

