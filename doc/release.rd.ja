# -*- rd -*-
= リリース手順

== 変更点の記述

変更点を NEWS, NEWS.ja に記述する。

git tag で前回リリースのタグを確認してから、コマンドを実行してログを読
む。

  % git log --reverse -p <前回リリースのタグ>..

例(1.8.1リリースの場合):
  % git log --reverse -p 1.8.0..

diff が長い場合は "Author:" で検索すると次のエントリにジャンプできる。

NEWS にログを抜粋してざっくりカテゴリ分けしてから NEWS.ja に日本語で書
いたあと、NEWS の英語をチェックする。

カテゴリは以下のようにディレクトリ名やコマンド名に対応している。

: 全体
  全体的な修正。
: milter manager
  milter manager に関する修正。
: milter-core
  milter/core 以下の修正。
: milter-client
  milter/client 以下の修正。
: milter-server
  milter/server 以下の修正。
: Ruby milter
  binding/ruby/{ext,lib} 以下の修正。
: コマンド名
  コマンド名のコマンドの修正。例えば、milter-test-server など。
: ドキュメント
  ドキュメントの修正。
: その他
  上のカテゴリにあてはまらないその他の修正。

前のバージョンのエントリを参考に

  * 改良
  * 修正
  * 報告者や貢献者の名前

を書く。

== ドキュメントの確認と更新

新バージョンに対応したドキュメントになっているか確認して更新する。

NEWS に書いた改良点や修正点を見ながらドキュメントをチェックして、更新で
きていない場合は、更新する。

== サイトの更新

ドキュメントをアップロードする。

== リリース用パッケージ作成

=== Debian 系

=== RedHat 系

== ソースアーカイブの作成


== リモートリポジトリにタグを打つ


== リリースメールを書いて ML に投げる

NEWS.ja, NEWS を参考にして日本語、英語のメールを書いてそれぞれ

  * milter-manager-users-ja
  * milter-manager-users-en

に投げる。

== ブログでもリリースをアナウンスする

((<URL:http://milter-manager.sourceforge.net/blog/ja/>)) にもリリースメー
ルと同じ内容を書く。


